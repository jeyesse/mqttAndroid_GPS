package tp.skt.onem2m.binder.mqtt_v1_1.request;import tp.skt.onem2m.binder.mqtt_v1_1.Definitions;import tp.skt.onem2m.common.MQTTConst;public class subscribe extends RequestBase {    private String passCode;    /**     * @param builder     */    public subscribe(Builder builder) {        super(builder);        this.passCode = builder.passCode;    }    public static class Builder extends RequestBase.Builder {        /**         * passCode         **/        private String passCode;        /**         * CSEtype         **/        private String cst;        /**         * CSE-ID         **/        private String csi;        /**         * pointOfAccess         **/        private String poa;        /**         * requestRechability         **/        private String rr;        /**         * nodelink         **/        private String nl;        public Builder(@Definitions.Operation int op) {            super(op, Definitions.ResourceType.remoteCSE);            nm = "{" + MQTTConst.RESOURCE_ID + "}";            csi = "{" + MQTTConst.RESOURCE_ID + "}";        }        public Builder passCode(String passCode) {            this.passCode = passCode;            return this;        }        public Builder cst(String cst) {            this.cst = cst;            return this;        }        public Builder csi(String csi) {            this.csi = csi;            return this;        }        public Builder poa(String poa) {            this.poa = poa;            return this;        }        public Builder rr(String rr) {            this.rr = rr;            return this;        }        public Builder nl(String nl) {            this.nl = nl;            return this;        }        public Builder nm(String nm) {            this.nm = nm;            return this;        }        public Builder dKey(String dKey) {            this.dKey = dKey;            return this;        }        public Builder uKey(String uKey) {            this.uKey = uKey;            return this;        }        @Override        Content getContent() {            Content content = new Content();            content.csr = new Content.Csr(cst, csi,poa, rr, nl);            return content;        }        @Override        String getTo() {            return null;        }        @Override        String getDefaultResourceName() {            return null;        }        public subscribe build() {            subscribe build = new subscribe(this);            return build;        }    }}